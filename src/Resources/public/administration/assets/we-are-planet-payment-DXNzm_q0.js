const S=`{% block sw_order_detail_content_tabs_general %} {% parent %} {# sw-tabs-item will dissappear. See: https://github.com/shopware/shopware/blob/trunk/UPGRADE-6.7.md#sw-tabs-is-removed #} <sw-tabs-item v-if="isWeArePlanetPayment" :route="{ name: 'weareplanet.order.detail', params: { id: $route.params.id } }" :title="$tc('weareplanet-order.header')"> {{ $tc('weareplanet-order.header') }} </sw-tabs-item> {% endblock %} {% block sw_order_detail_actions_slot_smart_bar_actions %} <template v-if="isEditable"> {% parent %} </template> {% endblock %}`,{Component:T,Context:g}=Shopware,P=Shopware.Data.Criteria,D="handler_weareplanetpayment_weareplanetpaymenthandler";T.override("sw-order-detail",{template:S,data(){return{isWeArePlanetPayment:!1}},computed:{isEditable(){return!this.isWeArePlanetPayment||this.$route.name!=="weareplanet.order.detail"},showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.setIsWeArePlanetPayment(null);return}const e=this.repositoryFactory.create("order"),t=new P(1,1);t.addAssociation("transactions"),e.get(this.orderId,g.api,t).then(a=>{if(a.amountTotal<=0||a.transactions.length<=0||!a.transactions[0].paymentMethodId){this.setIsWeArePlanetPayment(null);return}const n=a.transactions[0].paymentMethodId;n!=null&&this.setIsWeArePlanetPayment(n)})},immediate:!0}},methods:{setIsWeArePlanetPayment(e){if(!e)return;this.repositoryFactory.create("payment_method").get(e,g.api).then(a=>{this.isWeArePlanetPayment=a.formattedHandlerIdentifier===D})}}});const N=`{% block weareplanet_order_action_completion %} <sw-modal variant="small" :title="$tc(\`weareplanet-order.modal.title.capture\`)" @modal-close="$emit('modal-close')"> {% block weareplanet_order_action_completion_amount %} <mt-checkbox :label="$tc('weareplanet-order.captureAction.button.text')" v-model:checked="isCompletion"> </mt-checkbox> {% endblock %} {% block weareplanet_order_action_completion_confirm_button %} <template #modal-footer> <mt-button variant="primary" @click="completion"> {{ $tc('weareplanet-order.refundAction.confirmButton.text') }} </mt-button> </template> {% endblock %} <mt-loader v-if="isLoading"></mt-loader> </sw-modal> {% endblock %}`,{Component:k,Mixin:$,Filter:O,Utils:f}=Shopware;k.register("weareplanet-order-action-completion",{template:N,inject:["WeArePlanetTransactionCompletionService"],mixins:[$.getByName("notification")],props:{transactionData:{type:Object,required:!0}},data(){return{isLoading:!0,isCompletion:!1}},computed:{dateFilter(){return O.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},completion(){this.isCompletion&&(this.isLoading=!0,this.WeArePlanetTransactionCompletionService.createTransactionCompletion(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.captureAction.successTitle"),message:this.$tc("weareplanet-order.captureAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${f.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${f.createId()}`)})}}))}}});const x=`{% block weareplanet_order_action_refund %} <sw-modal variant="small" :title="$tc(\`weareplanet-order.modal.title.refund\`)" @modal-close="$emit('modal-close')"> {% block weareplanet_order_action_refund_amount %} <mt-number-field :max="this.$parent.$parent.itemRefundableQuantity" :min="0" v-model="refundQuantity" :label="$tc('weareplanet-order.refund.refundQuantity.label')"> </mt-number-field> <div> {{ $tc('weareplanet-order.refundAction.maxAvailableItemsToRefund') }}: <b>{{ this.$parent.$parent.itemRefundableQuantity }}</b> </div> {% endblock %} {% block weareplanet_order_action_refund_confirm_button %} <template #modal-footer> <mt-button variant="primary" @click="refund()"> {{ $tc('weareplanet-order.refundAction.confirmButton.text') }} </mt-button> </template> {% endblock %} <mt-loader v-if="isLoading"></mt-loader> </sw-modal> {% endblock %}`,{Component:F,Mixin:L,Filter:W,Utils:b}=Shopware;F.register("weareplanet-order-action-refund",{template:x,inject:["WeArePlanetRefundService"],mixins:[L.getByName("notification")],props:{transactionData:{type:Object,required:!0},orderId:{type:String,required:!0}},data(){return{refundQuantity:0,isLoading:!0,currentLineItem:""}},computed:{dateFilter(){return W.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.refundQuantity=1},refund(){this.isLoading=!0,this.WeArePlanetRefundService.createRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,this.refundQuantity,this.$parent.$parent.currentLineItem).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.refundAction.successTitle"),message:this.$tc("weareplanet-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${b.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${b.createId()}`)})}})}}});const M=`{% block weareplanet_order_action_refund_partial %} <sw-modal variant="small" :title="$tc(\`weareplanet-order.modal.title.refund\`)" @modal-close="$emit('modal-close')"> {% block weareplanet_order_action_refund_amount_partial %} <mt-number-field :max="this.$parent.$parent.itemRefundableAmount" :min="0.00" v-model="refundAmount" :label="$tc('weareplanet-order.refund.refundAmount.label')" :suffix="currency"> </mt-number-field> <div> {{ $tc('weareplanet-order.refundAction.maxAvailableAmountToRefund') }}: <b>{{ this.$parent.$parent.itemRefundableAmount }}</b> </div> {% endblock %} {% block weareplanet_order_action_refund_confirm_button_partial %} <template #modal-footer> <mt-button variant="primary" @click="createPartialRefund(this.$parent.$parent.currentLineItem)"> {{ $tc('weareplanet-order.refundAction.confirmButton.text') }} </mt-button> </template> {% endblock %} <mt-loader v-if="isLoading"></mt-loader> </sw-modal> {% endblock %}`,{Component:R,Mixin:B,Filter:G,Utils:_}=Shopware;R.register("weareplanet-order-action-refund-partial",{template:M,inject:["WeArePlanetRefundService"],mixins:[B.getByName("notification")],props:{transactionData:{type:Object,required:!0},orderId:{type:String,required:!0}},data(){return{isLoading:!0,currency:this.transactionData.transactions[0].currency,refundAmount:0}},computed:{dateFilter(){return G.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.currency=this.transactionData.transactions[0].currency,this.refundAmount||(this.refundAmount=this.$parent.$parent.itemRefundableAmount)},createPartialRefund(e){this.isLoading=!0,this.WeArePlanetRefundService.createPartialRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,this.refundAmount,e).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.refundAction.successTitle"),message:this.$tc("weareplanet-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${_.createId()}`)})}).catch(t=>{try{this.createNotificationError({title:t.response.data.errors[0].title,message:t.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:t.title,message:t.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${_.createId()}`)})}})}},watch:{refundAmount(e){e!==null&&(this.refundAmount=Math.round(e*100)/100)}}});const z=`{% block weareplanet_order_action_refund_by_amount %} <sw-modal variant="small" :title="$tc(\`weareplanet-order.modal.title.refund\`)" @modal-close="$emit('modal-close')"> {% block weareplanet_order_action_refund_amount_by_amount %} <mt-number-field :max="refundableAmount" :min="0" v-model="refundAmount" :label="$tc('weareplanet-order.refund.refundAmount.label')" :suffix="currency"> </mt-number-field> {% endblock %} {% block weareplanet_order_action_refund_confirm_button_by_amount %} <template #modal-footer> <mt-button variant="primary" @click="refundByAmount()"> {{ $tc('weareplanet-order.refundAction.confirmButton.text') }} </mt-button> </template> {% endblock %} <mt-loader v-if="isLoading"></mt-loader> </sw-modal> {% endblock %}`,{Component:U,Mixin:q,Filter:V,Utils:w}=Shopware;U.register("weareplanet-order-action-refund-by-amount",{template:z,inject:["WeArePlanetRefundService"],mixins:[q.getByName("notification")],props:{transactionData:{type:Object,required:!0},orderId:{type:String,required:!0}},data(){return{isLoading:!0,currency:this.transactionData.transactions[0].currency,refundAmount:0,refundableAmount:0}},computed:{dateFilter(){return V.getByName("date")}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.currency=this.transactionData.transactions[0].currency,this.refundAmount=Number(this.transactionData.transactions[0].amountIncludingTax),this.refundableAmount=Number(this.transactionData.transactions[0].amountIncludingTax)},refundByAmount(){this.isLoading=!0,this.WeArePlanetRefundService.createRefundByAmount(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,this.refundAmount).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.refundAction.successTitle"),message:this.$tc("weareplanet-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${w.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${w.createId()}`)})}})}}});const H=`{% block weareplanet_order_action_void %} <sw-modal variant="small" :title="$tc(\`weareplanet-order.modal.title.void\`)" @modal-close="$emit('modal-close')"> {% block weareplanet_order_action_void_amount %} {# Review if this v-model:checked="isVoid" needs to change to checked #} <mt-checkbox :label="$tc('weareplanet-order.voidAction.confirm.message')" v-model:checked="isVoid"> </mt-checkbox> {% endblock %} {% block weareplanet_order_action_void_confirm_button %} <template #modal-footer> <mt-button variant="primary" @click="voidPayment"> {{ $tc('weareplanet-order.refundAction.confirmButton.text') }} </mt-button> </template> {% endblock %} <mt-loader v-if="isLoading"></mt-loader> </sw-modal> {% endblock %}`,{Component:K,Mixin:Q,Filter:Y,Utils:I}=Shopware;K.register("weareplanet-order-action-void",{template:H,inject:["WeArePlanetTransactionVoidService"],mixins:[Q.getByName("notification")],props:{transactionData:{type:Object,required:!0}},data(){return{isLoading:!0,isVoid:!1}},computed:{dateFilter(){return Y.getByName("date")},lineItemColumns(){return[{property:"uniqueId",label:this.$tc("weareplanet-order.refund.types.uniqueId"),rawData:!1,allowResize:!0,primary:!0,width:"auto"},{property:"name",label:this.$tc("weareplanet-order.refund.types.name"),rawData:!0,allowResize:!0,sortable:!0,width:"auto"},{property:"quantity",label:this.$tc("weareplanet-order.refund.types.quantity"),rawData:!0,allowResize:!0,width:"auto"},{property:"amountIncludingTax",label:this.$tc("weareplanet-order.refund.types.amountIncludingTax"),rawData:!0,allowResize:!0,inlineEdit:"string",width:"auto"},{property:"type",label:this.$tc("weareplanet-order.refund.types.type"),rawData:!0,allowResize:!0,sortable:!0,width:"auto"},{property:"taxAmount",label:this.$tc("weareplanet-order.refund.types.taxAmount"),rawData:!0,allowResize:!0,width:"auto"}]}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1,this.currency=this.transactionData.transactions[0].currency,this.refundableAmount=this.transactionData.transactions[0].amountIncludingTax,this.refundAmount=this.transactionData.transactions[0].amountIncludingTax},voidPayment(){this.isVoid&&(this.isLoading=!0,this.WeArePlanetTransactionVoidService.createTransactionVoid(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.voidAction.successTitle"),message:this.$tc("weareplanet-order.voidAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${I.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${I.createId()}`)})}}))}}});const j=`{% block weareplanet_order_detail %} <div class="weareplanet-order-detail"> <div v-if="!isLoading"> <mt-card :title="$tc('weareplanet-order.paymentDetails.cardTitle')"> <template #grid> {% block weareplanet_order_actions_section %} <mt-card-section secondary slim> {% block weareplanet_order_transaction_refunds_action_button %} <mt-button variant="primary" size="small" :disabled="transaction.state != 'FULFILL' || refundableAmount <= 0" @click="spawnModal('refundByAmount')"> {{ $tc('weareplanet-order.buttons.label.refund') }} </mt-button> {% endblock %} {% block weareplanet_order_transaction_completion_action_button %} <mt-button variant="primary" size="small" :disabled="transaction.state != 'AUTHORIZED' || isLoading" @click="spawnModal('completion')"> {{ $tc('weareplanet-order.buttons.label.completion') }} </mt-button> {% endblock %} {% block weareplanet_order_transaction_void_action_button %} <mt-button variant="primary" size="small" :disabled="transaction.state != 'AUTHORIZED' || isLoading" @click="spawnModal('void')"> {{ $tc('weareplanet-order.buttons.label.void') }} </mt-button> {% endblock %} {% block weareplanet_order_transaction_download_invoice_action_button %} <mt-button variant="primary" size="small" :disabled="transaction.state != 'FULFILL'" @click="downloadInvoice()"> {{ $tc('weareplanet-order.buttons.label.download-invoice') }} </mt-button> {% endblock %} {% block weareplanet_order_transaction_download_packing_slip_action_button %} <mt-button variant="primary" size="small" :disabled="transaction.state != 'FULFILL'" @click="downloadPackingSlip()"> {{ $tc('weareplanet-order.buttons.label.download-packing-slip') }} </mt-button> {% endblock %} </mt-card-section> {% endblock %} </template> </mt-card> {% block weareplanet_order_transaction_history_card %} <mt-card :title="$tc('weareplanet-order.transactionHistory.cardTitle')"> <template #grid> {% block weareplanet_order_transaction_history_grid %} <sw-data-grid :dataSource="transactionData.transactions" :columns="relatedResourceColumns" :showActions="true" :showSelection="false"> <template #actions="{ item }"> <sw-context-menu-item v-if="item.customerId">{{ $tc('weareplanet-order.transactionHistory.customerId') }}: {{ item.customerId }}</sw-context-menu-item> <sw-context-menu-item v-if="item.customerName">{{ $tc('weareplanet-order.transactionHistory.customerName') }}: {{ item.customerName }}</sw-context-menu-item> <sw-context-menu-item v-if="item.creditCardHolder">{{ $tc('weareplanet-order.transactionHistory.creditCardHolder') }}: {{ item.creditCardHolder }}</sw-context-menu-item> <sw-context-menu-item v-if="item.paymentMethodName">{{ $tc('weareplanet-order.transactionHistory.paymentMethod') }}: {{ item.paymentMethodName }}</sw-context-menu-item> <sw-context-menu-item v-if="item.brandName">{{ $tc('weareplanet-order.transactionHistory.paymentMethodBrand') }}: {{ item.brandName }}</sw-context-menu-item> <sw-context-menu-item v-if="item.pseudoCardNumber">{{ $tc('weareplanet-order.transactionHistory.PseudoCreditCardNumber') }}: {{ item.pseudoCardNumber }}</sw-context-menu-item> <sw-context-menu-item v-if="item.pseudoCardNumber && item.cardExpireMonth && item.cardExpireYear">{{ $tc('weareplanet-order.transactionHistory.CardExpire') }}: {{ item.cardExpireMonth }} / {{ item.cardExpireYear }}</sw-context-menu-item> <sw-context-menu-item v-if="item.payId">PayID: {{ item.payId }}</sw-context-menu-item> </template> </sw-data-grid> {% endblock %} </template> </mt-card> {% endblock %} {% block weareplanet_order_transaction_line_items_card %} <mt-card :title="$tc('weareplanet-order.lineItem.cardTitle')"> <template #grid> {% block weareplanet_order_transaction_line_items_grid %} <sw-data-grid :dataSource="lineItems" :columns="lineItemColumns" :showActions="true" :showSelection="true" :local-mode="false" :is-record-selectable="isSelectable" @selection-change="onSelectionChanged" > {% block weareplanet_order_transaction_line_items_grid_grid_actions %} <template #actions="{ item }"> <sw-context-menu-item :disabled="transaction.state != 'FULFILL' || item.refundableQuantity != item.quantity || item.refundableAmount == 0 || item.itemRefundedAmount > 0 || item.itemRefundedQuantity > 0" @click="lineItemRefund(item.uniqueId)"> {{ $tc('weareplanet-order.buttons.label.refund-whole-line-item') }} </sw-context-menu-item> <sw-context-menu-item :disabled="transaction.state != 'FULFILL' || item.refundableQuantity == 0 || item.refundableAmount == 0 || item.itemRefundedAmount > 0" @click="spawnModal('refund', item.uniqueId, item.refundableQuantity)"> {{ $tc('weareplanet-order.buttons.label.refund-line-item-by-quantity') }} </sw-context-menu-item> <sw-context-menu-item :disabled="transaction.state != 'FULFILL' || item.refundableQuantity == 0 || item.refundableAmount == 0 || item.itemRefundedQuantity > 0" @click="spawnModal('partialRefund', item.uniqueId, item.refundableQuantity, item.refundableAmount)"> {{ $tc('weareplanet-order.buttons.label.refund-line-item-parial') }} </sw-context-menu-item> </template> {% endblock %} {% block weareplanet_order_transaction_line_items_grid_bulk_actions %} <template #bulk> <a class="link link-danger" role="link" tabindex="0" :disabled="selectedItems.length === 0" @click="onPerformBulkAction"> {{ $tc('weareplanet-order.buttons.label.refund-line-item-selected') }} </a> </template> {% endblock %} </sw-data-grid> {% endblock %} </template> </mt-card> {% endblock %} {% block weareplanet_order_transaction_refunds_card %} <mt-card :title="$tc('weareplanet-order.refund.cardTitle')" v-if="transactionData.refunds.length > 0"> <template #grid> {% block weareplanet_order_transaction_refunds_grid %} <sw-data-grid :dataSource="transactionData.refunds" :columns="refundColumns" :showActions="false" :showSelection="false"> </sw-data-grid> {% endblock %} </template> </mt-card> {% endblock %} {% block weareplanet_order_actions_modal_refund_partial %} <weareplanet-order-action-refund-partial v-if="modalType === 'partialRefund'" :orderId="orderId" :transactionData="transactionData" :lineItems="lineItems" @modal-close="closeModal"> </weareplanet-order-action-refund-partial> {% endblock %} {% block weareplanet_order_actions_modal_refund %} <weareplanet-order-action-refund v-if="modalType === 'refund'" :orderId="orderId" :transactionData="transactionData" :lineItems="lineItems" @modal-close="closeModal"> </weareplanet-order-action-refund> {% endblock %} {% block weareplanet_order_actions_modal_refund_by_amount %} <weareplanet-order-action-refund-by-amount v-if="modalType === 'refundByAmount'" :orderId="orderId" :transactionData="transactionData" :lineItems="lineItems" @modal-close="closeModal"> </weareplanet-order-action-refund-by-amount> {% endblock %} {% block weareplanet_order_actions_modal_completion%} <weareplanet-order-action-completion v-if="modalType === 'completion'" :orderId="orderId" :transactionData="transactionData" :lineItems="lineItems" @modal-close="closeModal"> </weareplanet-order-action-completion> {% endblock %} {% block weareplanet_order_actions_modal_void %} <weareplanet-order-action-void v-if="modalType === 'void'" :orderId="orderId" :transactionData="transactionData" :lineItems="lineItems" @modal-close="closeModal"> </weareplanet-order-action-void> {% endblock %} </div> <mt-loader v-if="isLoading"></mt-loader> </div> {% endblock %}`,{Component:Z,Mixin:J,Filter:X,Context:ee,Utils:p}=Shopware,y=Shopware.Data.Criteria;Z.register("weareplanet-order-detail",{template:j,inject:["WeArePlanetTransactionService","WeArePlanetRefundService","repositoryFactory"],mixins:[J.getByName("notification")],data(){return{transactionData:{transactions:[],refunds:[]},transaction:{},lineItems:[],refundableQuantity:0,itemRefundableQuantity:0,isLoading:!0,orderId:"",currency:"",modalType:"",refundAmount:0,refundableAmount:0,itemRefundedAmount:0,itemRefundedQuantity:0,itemRefundableAmount:0,currentLineItem:"",refundLineItemQuantity:[],refundLineItemAmount:[],selectedItems:[]}},metaInfo(){return{title:this.$tc("weareplanet-order.header")}},computed:{dateFilter(){return X.getByName("date")},relatedResourceColumns(){return[{property:"paymentMethodName",label:this.$tc("weareplanet-order.transactionHistory.types.payment_method"),rawData:!0},{property:"state",label:this.$tc("weareplanet-order.transactionHistory.types.state"),rawData:!0},{property:"currency",label:this.$tc("weareplanet-order.transactionHistory.types.currency"),rawData:!0},{property:"authorized_amount",label:this.$tc("weareplanet-order.transactionHistory.types.authorized_amount"),rawData:!0},{property:"id",label:this.$tc("weareplanet-order.transactionHistory.types.transaction"),rawData:!0},{property:"customerId",label:this.$tc("weareplanet-order.transactionHistory.types.customer"),rawData:!0}]},lineItemColumns(){return[{property:"id",rawData:!0,visible:!1,primary:!0},{property:"uniqueId",label:this.$tc("weareplanet-order.lineItem.types.uniqueId"),rawData:!0,visible:!1,primary:!0},{property:"name",label:this.$tc("weareplanet-order.lineItem.types.name"),rawData:!0},{property:"quantity",label:this.$tc("weareplanet-order.lineItem.types.quantity"),rawData:!0},{property:"amountIncludingTax",label:this.$tc("weareplanet-order.lineItem.types.amountIncludingTax"),rawData:!0},{property:"type",label:this.$tc("weareplanet-order.lineItem.types.type"),rawData:!0},{property:"taxAmount",label:this.$tc("weareplanet-order.lineItem.types.taxAmount"),rawData:!0},{property:"refundableQuantity",rawData:!0,visible:!1}]},refundColumns(){return[{property:"id",label:this.$tc("weareplanet-order.refund.types.id"),rawData:!0,visible:!0,primary:!0},{property:"amount",label:this.$tc("weareplanet-order.refund.types.amount"),rawData:!0},{property:"state",label:this.$tc("weareplanet-order.refund.types.state"),rawData:!0},{property:"createdOn",label:this.$tc("weareplanet-order.refund.types.createdOn"),rawData:!0}]}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){this.orderId=this.$route.params.id;const e=this.repositoryFactory.create("order"),t=new y(1,1);t.addAssociation("transactions"),t.getAssociation("transactions").addSorting(y.sort("createdAt","DESC")),e.get(this.orderId,ee.api,t).then(a=>{this.order=a,this.isLoading=!1;var n=0,r=0;const s=a.transactions[0].customFields.weareplanet_transaction_id;this.WeArePlanetTransactionService.getTransactionData(a.salesChannelId,s).then(o=>{this.currency=o.transactions[0].currency,o.transactions[0].authorized_amount=p.format.currency(o.transactions[0].authorizationAmount,this.currency),o.refunds.forEach(i=>{r=parseFloat(parseFloat(r)+parseFloat(i.amount)),i.amount=p.format.currency(i.amount,this.currency),i.reductions.forEach(l=>{l.quantityReduction>0&&(this.refundLineItemQuantity[l.lineItemUniqueId]===void 0?this.refundLineItemQuantity[l.lineItemUniqueId]=l.quantityReduction:this.refundLineItemQuantity[l.lineItemUniqueId]+=l.quantityReduction),l.unitPriceReduction>0&&(this.refundLineItemAmount[l.lineItemUniqueId]===void 0?this.refundLineItemAmount[l.lineItemUniqueId]=l.unitPriceReduction:this.refundLineItemAmount[l.lineItemUniqueId]+=l.unitPriceReduction)})}),o.transactions[0].lineItems.forEach(i=>{i.id||(i.id=i.uniqueId),i.itemRefundedAmount=parseFloat(this.refundLineItemAmount[i.uniqueId]||0)*parseInt(i.quantity),i.amountIncludingTax=parseFloat(i.amountIncludingTax)||0,i.itemRefundedQuantity=parseInt(this.refundLineItemQuantity[i.uniqueId])||0,i.refundableAmount=parseFloat((i.amountIncludingTax-i.itemRefundedAmount).toFixed(2)),i.amountIncludingTax=p.format.currency(i.amountIncludingTax,this.currency),i.taxAmount=p.format.currency(i.taxAmount,this.currency),n=parseFloat(parseFloat(n)+parseFloat(i.unitPriceIncludingTax*i.quantity)),i.refundableQuantity=parseInt(parseInt(i.quantity)-parseInt(this.refundLineItemQuantity[i.uniqueId]||0))}),this.lineItems=o.transactions[0].lineItems,this.transactionData=o,this.transaction=this.transactionData.transactions[0],this.refundAmount=Number(this.transactionData.transactions[0].amountIncludingTax),this.refundableAmount=parseFloat(parseFloat(n)-parseFloat(r))}).catch(o=>{try{this.createNotificationError({title:this.$tc("weareplanet-order.paymentDetails.error.title"),message:o.message,autoClose:!1})}catch{this.createNotificationError({title:this.$tc("weareplanet-order.paymentDetails.error.title"),message:o.message,autoClose:!1})}finally{this.isLoading=!1}})})},downloadPackingSlip(){window.open(this.WeArePlanetTransactionService.getPackingSlip(this.transaction.metaData.salesChannelId,this.transaction.id),"_blank")},downloadInvoice(){window.open(this.WeArePlanetTransactionService.getInvoiceDocument(this.transaction.metaData.salesChannelId,this.transaction.id),"_blank")},resetDataAttributes(){this.transactionData={transactions:[],refunds:[]},this.lineItems=[],this.refundLineItemQuantity=[],this.refundLineItemAmount=[],this.isLoading=!0},spawnModal(e,t,a,n){this.modalType=e,this.currentLineItem=t,this.itemRefundableQuantity=a,this.itemRefundableAmount=isNaN(n)?0:Math.round(n*100)/100},closeModal(){this.modalType=""},lineItemRefund(e){this.isLoading=!0,this.WeArePlanetRefundService.createRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,0,e).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.refundAction.successTitle"),message:this.$tc("weareplanet-order.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${p.createId()}`)})}).catch(t=>{try{this.createNotificationError({title:t.response.data.errors[0].title,message:t.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:t.title,message:t.response.data,autoClose:!1})}finally{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${p.createId()}`)})}})},isSelectable(e){return e.refundableQuantity>0&&e.refundableAmount>0&&e.itemRefundedAmount==0&&e.itemRefundedQuantity==0},onSelectionChanged(e){this.selectedItems=Object.values(e)},onPerformBulkAction(){this.selectedItems.length&&(this.isLoading=!0,this.$nextTick(()=>{const e=this.selectedItems.map(t=>this.lineItemRefundBulk(t.uniqueId));Promise.all(e).then(()=>{this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${p.createId()}`)})}).catch(t=>{this.createNotificationError({title:"Error",message:"Something went wrong with the refunds",autoClose:!1}),this.isLoading=!1})}))},lineItemRefundBulk(e){return new Promise((t,a)=>{this.WeArePlanetRefundService.createRefund(this.transactionData.transactions[0].metaData.salesChannelId,this.transactionData.transactions[0].id,0,e).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-order.refundAction.successTitle"),message:this.$tc("weareplanet-order.refundAction.successMessage")}),t()}).catch(n=>{try{this.createNotificationError({title:n.response.data.errors[0].title,message:n.response.data.errors[0].detail,autoClose:!1})}catch{this.createNotificationError({title:n.title,message:n.response.data,autoClose:!1})}finally{a()}})})}}});const te={"weareplanet-order":{buttons:{label:{completion:"Abschluss","download-invoice":"Rechnung herunterladen","download-packing-slip":"Packzettel herunterladen",refund:"Eine neue Rückerstattung erstellen",void:"Genehmigung annullieren","refund-whole-line-item":"Gesamte Werbebuchung erstatten","refund-line-item-by-quantity":"Rückerstattung nach Menge","refund-line-item-selected":"Rückerstattung auswählen","refund-line-item-parial":"Teilweise Rückerstattung"}},captureAction:{button:{text:"Zahlung erfassen"},currentAmount:"Betrag",isFinal:"Dies ist die endgültige Verbuchung",maxAmount:"Maximaler Betrag",successMessage:"Ihre Verbuchung war erfolgreich",successTitle:"Erfolg"},general:{title:"Bestellungen"},header:"WeArePlanet Payment",lineItem:{cardTitle:"Einzelposten",types:{amountIncludingTax:"Betrag",name:"Name",quantity:"Anzahl",taxAmount:"Steuern",type:"Typ",uniqueId:"Eindeutige ID"}},modal:{title:{capture:"Erfassen",refund:"Neue Gutschrift",void:"Autorisierung aufheben"}},paymentDetails:{cardTitle:"Zahlung",error:{title:"Fehler beim Abrufen von Zahlungsdetails von WeArePlanet"}},refund:{cardTitle:"Gutschriften",refundAmount:{label:"Gutschriftsbetrag"},refundQuantity:{label:"Refund Menge"},types:{amount:"Betrag",createdOn:"Erstellt am",id:"ID",state:"Staat"}},refundAction:{confirmButton:{text:"Ausführen"},refundAmount:{label:"Betrag",placeholder:"Einen Betrag eingeben"},successMessage:"Ihre Rückerstattung war erfolgreich",successTitle:"Erfolg",maxAvailableItemsToRefund:"Maximal Verfügbare Artikel zum Erstatten",maxAvailableAmountToRefund:"Maximal verfügbarer Erstattungsbetrag"},transactionHistory:{cardTitle:"Einzelheiten",types:{authorized_amount:"Autorisierter Betrag",currency:"Währung",customer:"Kunde",payment_method:"Zahlungsweise",state:"Staat",transaction:"Transaktion"},customerId:"Customer ID",customerName:"Customer Name",creditCardHolder:"Kreditkarteninhaber",paymentMethod:"Zahlungsart",paymentMethodBrand:"Marke der Zahlungsmethode",PseudoCreditCardNumber:"Pseudo-Kreditkartennummer",CardExpire:"Karte verfällt"},voidAction:{confirm:{button:{cancel:"Nein",confirm:"Autorisierung aufheben"},message:"Wollen Sie diese Zahlung wirklich stornieren?"},successMessage:"Die Zahlung wurde erfolgreich annulliert",successTitle:"Erfolg"}}},ae={"weareplanet-order":{buttons:{label:{completion:"Complete","download-invoice":"Download Invoice","download-packing-slip":"Download Packing Slip",refund:"Create a new refund",void:"Cancel authorization","refund-whole-line-item":"Refund whole line item","refund-line-item-by-quantity":"Refund by quantity","refund-line-item-selected":"Refund selected","refund-line-item-parial":"Partial refund"}},captureAction:{button:{text:"Capture payment"},currentAmount:"Amount",isFinal:"This is final capture",maxAmount:"Maximum amount",successMessage:"Your capture was successful.",successTitle:"Success"},general:{title:"Orders"},header:"WeArePlanet Payment",lineItem:{cardTitle:"Line Items",types:{amountIncludingTax:"Amount",name:"Name",quantity:"Quantity",taxAmount:"Taxes",type:"Type",uniqueId:"Unique ID"}},modal:{title:{capture:"Capture",refund:"New refund",void:"Cancel authorization"}},paymentDetails:{cardTitle:"Payment",error:{title:"Error fetching payment details from WeArePlanet"}},refund:{cardTitle:"Refunds",refundAmount:{label:"Refund Amount"},refundQuantity:{label:"Refund Quantity"},types:{amount:"Amount",createdOn:"Created On",id:"ID",state:"State"}},refundAction:{confirmButton:{text:"Execute"},refundAmount:{label:"Amount",placeholder:"Enter a amount"},successMessage:"Your refund was successful.",successTitle:"Success",maxAvailableItemsToRefund:"Maximum available items to refund",maxAvailableAmountToRefund:"Maximum available amount to refund"},transactionHistory:{cardTitle:"Details",types:{authorized_amount:"Authorized Amount",currency:"Currency",customer:"Customer",payment_method:"Payment Method",state:"State",transaction:"Transaction"},customerId:"Customer ID",customerName:"Customer Name",creditCardHolder:"Credit Card Holder",paymentMethod:"Payment Method",paymentMethodBrand:"Payment Method Brand",PseudoCreditCardNumber:"Pseudo Credit Card Number",CardExpire:"Card Expire"},voidAction:{confirm:{button:{cancel:"No",confirm:"Cancel authorization"},message:"Do you really want to cancel this payment?"},successMessage:"The payment was successfully voided.",successTitle:"Success"}}},ne={"weareplanet-order":{buttons:{label:{completion:"Terminée","download-invoice":"Télécharger la facture","download-packing-slip":"Télécharger le bordereau d'expédition",refund:"Créer un nouveau remboursement",void:"Annulez l'autorisation","refund-whole-line-item":"Remboursement de la ligne entière","refund-line-item-by-quantity":"Remboursement par quantité","refund-line-item-selected":"Rembourser sélectionnés","refund-line-item-parial":"Remboursement partiel"}},captureAction:{button:{text:"Capture du paiement"},currentAmount:"Montant",isFinal:"C'est la capture finale",maxAmount:"Montant maximal",successMessage:"Votre capture a été réussie.",successTitle:"Succès"},general:{title:"Commandes"},header:"WeArePlanet Paiement",lineItem:{cardTitle:"Articles de ligne",types:{amountIncludingTax:"Montant",name:"Nom",quantity:"Quantité",taxAmount:"Taxes",type:"Type",uniqueId:"ID unique"}},modal:{title:{capture:"Capture",refund:"Nouveau remboursement",void:"Annulez l'autorisation"}},paymentDetails:{cardTitle:"Paiement",error:{title:"Erreur dans la récupération des détails du paiement à partir de WeArePlanet"}},refund:{cardTitle:"Remboursements",refundAmount:{label:"Montant du remboursement"},refundQuantity:{label:"Quantité à rembourser"},types:{amount:"Montant",createdOn:"Créé le",id:"ID",state:"État"}},refundAction:{confirmButton:{text:"Exécutez"},refundAmount:{label:"Montant",placeholder:"Entrez un montant"},successMessage:"Votre remboursement a été effectué avec succès.",successTitle:"Succès",maxAvailableItemsToRefund:"Nombre maximum d'articles disponibles pour le remboursement",maxAvailableAmountToRefund:"Montant maximal disponible pour le remboursement"},transactionHistory:{cardTitle:"Détails",types:{authorized_amount:"Montant autorisé",currency:"Monnaie",customer:"Client",payment_method:"Mode de paiement",state:"État",transaction:"Transaction"},customerId:"Customer ID",customerName:"Customer Name",creditCardHolder:"Titulaire de la carte de crédit",paymentMethod:"Mode de paiement",paymentMethodBrand:"Marque du mode de paiement",PseudoCreditCardNumber:"Pseudo numéro de carte de crédit",CardExpire:"La carte expire"},voidAction:{confirm:{button:{cancel:"Non",confirm:"Annulez l'autorisation"},message:"Voulez-vous vraiment annuler ce paiement?"},successMessage:"Le paiement a été annulé avec succès.",successTitle:"Succès"}}},ie={"weareplanet-order":{buttons:{label:{completion:"Completato","download-invoice":"Scarica fattura","download-packing-slip":"Scarica distinta di imballaggio",refund:"Crea un nuovo rimborso",void:"Annulla autorizzazione","refund-whole-line-item":"Rimborso intera riga","refund-line-item-by-quantity":"Rimborso per quantità","refund-line-item-selected":"Rimborso selezionati","refund-line-item-parial":"Rimborso parziale"}},captureAction:{button:{text:"Cattura pagamento"},currentAmount:"Importo",isFinal:"Questa è la cattura finale",maxAmount:"Importo massimo",successMessage:"La tua cattura ha avuto successo.",successTitle:"Successo"},general:{title:"Ordini"},header:"Pagamento WeArePlanet",lineItem:{cardTitle:"Articoli di linea",types:{amountIncludingTax:"Importo",name:"Nome",quantity:"Quantità",taxAmount:"Tasse",type:"Tipo",uniqueId:"ID unico"}},modal:{title:{capture:"Cattura",refund:"Nuovo rimborso",void:"Annulla autorizzazione"}},paymentDetails:{cardTitle:"Pagamento",error:{title:"Errore nel recupero dei dettagli del pagamento da WeArePlanet"}},refund:{cardTitle:"Rimborsi",refundAmount:{label:"Importo del rimborso"},refundQuantity:{label:"Quantità di rimborso"},types:{amount:"Importo",createdOn:"Creato il",id:"ID",state:"Stato"}},refundAction:{confirmButton:{text:"Esegui"},refundAmount:{label:"Importo",placeholder:"Inserisci un importo"},successMessage:"Il tuo rimborso è andato a buon fine.",successTitle:"Successo",maxAvailableItemsToRefund:"Numero massimo di articoli disponibili da rimborsare",maxAvailableAmountToRefund:"Importo massimo disponibile per il rimborso"},transactionHistory:{cardTitle:"Dettagli",types:{authorized_amount:"Importo autorizzato",currency:"Valuta",customer:"Cliente",payment_method:"Metodo di pagamento",state:"Stato",transaction:"Transazione"},customerId:"Customer ID",customerName:"Customer Name",creditCardHolder:"Proprietario della carta di credito",paymentMethod:"Metodo di pagamento",paymentMethodBrand:"Metodo di pagamento Marca",PseudoCreditCardNumber:"Numero di carta di credito pseudo",CardExpire:"La carta scade"},voidAction:{confirm:{button:{cancel:"No",confirm:"Annulla autorizzazione"},message:"Vuoi davvero annullare questo pagamento?"},successMessage:"Il pagamento è stato annullato con successo.",successTitle:"Successo"}}},{Module:re}=Shopware;re.register("weareplanet-order",{type:"plugin",name:"WeArePlanet",title:"weareplanet-order.general.title",description:"weareplanet-order.general.descriptionTextModule",version:"1.0.1",targetVersion:"1.0.1",color:"#2b52ff",snippets:{"de-DE":te,"en-GB":ae,"fr-FR":ne,"it-IT":ie},routeMiddleware(e,t){t.name==="sw.order.detail"&&t.children.push({component:"weareplanet-order-detail",name:"weareplanet.order.detail",isChildren:!0,path:"/sw/order/weareplanet/detail/:id"}),e(t)}});Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:"weareplanet",key:"weareplanet",roles:{viewer:{privileges:["sales_channel:read","sales_channel_payment_method:read","system_config:read"],dependencies:[]},editor:{privileges:["sales_channel:update","sales_channel_payment_method:create","sales_channel_payment_method:update","system_config:update","system_config:create","system_config:delete"],dependencies:["weareplanet.viewer"]}}});Shopware.Service("privileges").addPrivilegeMappingEntry({category:"permissions",parent:null,key:"sales_channel",roles:{viewer:{privileges:["sales_channel_payment_method:read"]},editor:{privileges:["payment_method:update"]},creator:{privileges:["payment_method:create","shipping_method:create","delivery_time:create"]},deleter:{privileges:["payment_method:delete"]}}});const oe=`{% block weareplanet_settings %} <sw-page class="weareplanet-settings"> {% block weareplanet_settings_header %} <template #smart-bar-header> <h2> {{ $tc('sw-settings.index.title') }} <mt-icon name="small-arrow-medium-right" size="16px"></mt-icon> {{ $tc('weareplanet-settings.header') }} </h2> </template> {% endblock %} {% block weareplanet_settings_actions %} <template #smart-bar-actions> {% block weareplanet_settings_actions_save %} <mt-button v-model:value="isSaveSuccessful" class="sw-settings-login-registration__save-action" variant="primary" :isLoading="isLoading" :disabled="isLoading" @click="onSave"> {{ $tc('weareplanet-settings.settingForm.save') }} </mt-button> {% endblock %} </template> {% endblock %} {% block weareplanet_settings_content %} <template #content> {% block weareplanet_settings_content_card %} <mt-card-view> {% block weareplanet_settings_content_card_channel_config %} <sw-sales-channel-config v-model:value="config" ref="configComponent" :domain="CONFIG_DOMAIN"> {% block weareplanet_settings_content_card_channel_config_sales_channel %} <template #select="{ onInput, selectedSalesChannelId, salesChannel }"> {% block weareplanet_settings_content_card_channel_config_sales_channel_card %} <mt-card title="Sales Channel Switch"> {% block weareplanet_settings_content_card_channel_config_sales_channel_card_title %} <sw-single-select v-model:value="selectedSalesChannelId" labelProperty="translated.name" valueProperty="id" :mapInheritance="props" :isLoading="isLoading" :options="salesChannel" @update:value="onInput"> </sw-single-select> {% endblock %} {% block weareplanet_settings_content_card_channel_config_sales_channel_card_footer %} <template #footer> {% block weareplanet_settings_content_card_channel_config_sales_channel_card_footer_container %} <sw-container columns="2fr 1fr" gap="0px 30px"> {% block weareplanet_settings_content_card_channel_config_sales_channel_card_footer_container_text %} <p>{{ $tc('weareplanet-settings.salesChannelCard.button.description') }}</p> {% endblock %} {% block weareplanet_settings_content_card_channel_config_sales_channel_card_footer_container_button %} <sw-button variant="primary" v-model:value="isSetDefaultPaymentSuccessful" :isLoading="isSettingDefaultPaymentMethods" @click="onSetPaymentMethodDefault"> {{ $tc('weareplanet-settings.salesChannelCard.button.label') }} </sw-button> {% endblock %} </sw-container> {% endblock %} </template> {% endblock %} </mt-card> {% endblock %} </template> {% endblock %} {% block weareplanet_settings_content_card_channel_config_cards %} <template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }"> <div v-if="actualConfigData"> <sw-weareplanet-credentials :actualConfigData="actualConfigData" :allConfigs="allConfigs" :selectedSalesChannelId="selectedSalesChannelId" :spaceIdErrorState="spaceIdErrorState" :userIdErrorState="userIdErrorState" :applicationKeyErrorState="applicationKeyErrorState" :spaceIdFilled="spaceIdFilled" :userIdFilled="userIdFilled" :applicationKeyFilled="applicationKeyFilled" :isLoading="isLoading" :isTesting="isTesting" @check-api-connection-event="onCheckApiConnection" ></sw-weareplanet-credentials> <sw-weareplanet-options :actualConfigData="actualConfigData" :allConfigs="allConfigs" :isLoading="isLoading" :selectedSalesChannelId="selectedSalesChannelId" > </sw-weareplanet-options> <sw-weareplanet-storefront-options :actualConfigData="actualConfigData" :allConfigs="allConfigs" :isLoading="isLoading" :selectedSalesChannelId="selectedSalesChannelId" > </sw-weareplanet-storefront-options> <sw-weareplanet-advanced-options :actualConfigData="actualConfigData" :allConfigs="allConfigs" :isLoading="isLoading" :selectedSalesChannelId="selectedSalesChannelId" > </sw-weareplanet-advanced-options> </div> </template> {% endblock %} </sw-sales-channel-config> {% endblock %} {% block weareplanet_settings_content_card_loading %} <mt-loader v-if="isLoading"></mt-loader> {% endblock %} </mt-card-view> {% endblock %} </template> {% endblock %} </sw-page> {% endblock %}`,c="WeArePlanetPayment.config",se=c+".applicationKey",le=c+".emailEnabled",ce=c+".integration",de=c+".lineItemConsistencyEnabled",ue=c+".spaceId",pe=c+".spaceViewId",me=c+".storefrontInvoiceDownloadEnabled",he=c+".userId",ge=c+".storefrontWebhooksUpdateEnabled",fe=c+".storefrontPaymentsUpdateEnabled",u={CONFIG_DOMAIN:c,CONFIG_APPLICATION_KEY:se,CONFIG_EMAIL_ENABLED:le,CONFIG_INTEGRATION:ce,CONFIG_LINE_ITEM_CONSISTENCY_ENABLED:de,CONFIG_SPACE_ID:ue,CONFIG_SPACE_VIEW_ID:pe,CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED:me,CONFIG_USER_ID:he,CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED:ge,CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED:fe},{Component:be,Mixin:C}=Shopware;be.register("weareplanet-settings",{template:oe,inject:["acl","WeArePlanetConfigurationService"],mixins:[C.getByName("notification"),C.getByName("sw-inline-snippet")],data(){return{config:{},isLoading:!1,isTesting:!1,isSaveSuccessful:!1,applicationKeyFilled:!1,applicationKeyErrorState:!1,spaceIdFilled:!1,spaceIdErrorState:!1,userIdFilled:!1,userIdErrorState:!1,isSetDefaultPaymentSuccessful:!1,isSettingDefaultPaymentMethods:!1,configIntegrationDefaultValue:"payment_page",configEmailEnabledDefaultValue:!0,configLineItemConsistencyEnabledDefaultValue:!0,configStorefrontInvoiceDownloadEnabledEnabledDefaultValue:!0,configStorefrontWebhooksUpdateEnabledDefaultValue:!0,configStorefrontPaymentsUpdateEnabledDefaultValue:!0,...u}},props:{isLoading:{type:Boolean,required:!0}},metaInfo(){return{title:this.$createTitle()}},watch:{config:{handler(e){const t=this.$refs.configComponent.allConfigs.null;this.$refs.configComponent.selectedSalesChannelId===null?(this.applicationKeyFilled=!!this.config[this.CONFIG_APPLICATION_KEY],this.spaceIdFilled=!!this.config[this.CONFIG_SPACE_ID],this.userIdFilled=!!this.config[this.CONFIG_USER_ID],this.CONFIG_INTEGRATION in this.config||(this.config[this.CONFIG_INTEGRATION]=this.configIntegrationDefaultValue),this.CONFIG_EMAIL_ENABLED in this.config||(this.config[this.CONFIG_EMAIL_ENABLED]=this.configEmailEnabledDefaultValue),this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in this.config||(this.config[this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]=this.configLineItemConsistencyEnabledDefaultValue),this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]=this.configStorefrontInvoiceDownloadEnabledEnabledDefaultValue),this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]=this.configStorefrontWebhooksUpdateEnabledDefaultValue),this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in this.config||(this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]=this.configStorefrontPaymentsUpdateEnabledDefaultValue)):(this.applicationKeyFilled=!!this.config[this.CONFIG_APPLICATION_KEY]||!!t[this.CONFIG_APPLICATION_KEY],this.spaceIdFilled=!!this.config[this.CONFIG_SPACE_ID]||!!t[this.CONFIG_SPACE_ID],this.userIdFilled=!!this.config[this.CONFIG_USER_ID]||!!t[this.CONFIG_USER_ID],(!(this.CONFIG_INTEGRATION in this.config)||!(this.CONFIG_INTEGRATION in t))&&(this.config[this.CONFIG_INTEGRATION]=this.configIntegrationDefaultValue),(!(this.CONFIG_EMAIL_ENABLED in this.config)||!(this.CONFIG_EMAIL_ENABLED in t))&&(this.config[this.CONFIG_EMAIL_ENABLED]=this.configEmailEnabledDefaultValue),(!(this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in this.config)||!(this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED in t))&&(this.config[this.CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]=this.configLineItemConsistencyEnabledDefaultValue),(!(this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in this.config)||!(this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED in t))&&(this.config[this.CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]=this.configStorefrontInvoiceDownloadEnabledEnabledDefaultValue),(!(this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in this.config)||!(this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED in t))&&(this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]=this.configStorefrontWebhooksUpdateEnabledDefaultValue),(!(this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in this.config)||!(this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED in t))&&(this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]=this.configStorefrontPaymentsUpdateEnabledDefaultValue)),this.$emit("salesChannelChanged"),this.$emit("update:value",e)},deep:!0}},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkNumberFieldInheritance(e){return typeof e!="number"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"},getInheritValue(e){return this.selectedSalesChannelId==null?this.actualConfigData[e]:this.allConfigs.null[e]},onSave(){if(!(this.spaceIdFilled&&this.userIdFilled&&this.applicationKeyFilled)){this.setErrorStates();return}this.save()},save(){this.isLoading=!0,this.$refs.configComponent.save().then(e=>{e&&(this.config=e),this.registerWebHooks(),this.synchronizePaymentMethodConfiguration(),this.installOrderDeliveryStates()}).catch(e=>{console.error("Error:",e),this.isLoading=!1})},registerWebHooks(){if(this.config[this.CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]===!1)return!1;this.WeArePlanetConfigurationService.registerWebHooks(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-settings.settingForm.titleSuccess"),message:this.$tc("weareplanet-settings.settingForm.messageWebHookUpdated")})}).catch(e=>{this.createNotificationError({title:this.$tc("weareplanet-settings.settingForm.titleError"),message:this.$tc("weareplanet-settings.settingForm.messageWebHookError")}),this.isLoading=!1,console.error("Error:",e)})},synchronizePaymentMethodConfiguration(){if(this.config[this.CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]===!1)return!1;this.WeArePlanetConfigurationService.synchronizePaymentMethodConfiguration(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-settings.settingForm.titleSuccess"),message:this.$tc("weareplanet-settings.settingForm.messagePaymentMethodConfigurationUpdated")}),this.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("weareplanet-settings.settingForm.titleError"),message:this.$tc("weareplanet-settings.settingForm.messagePaymentMethodConfigurationError")}),this.isLoading=!1,console.error("Error:",e)})},installOrderDeliveryStates(){this.WeArePlanetConfigurationService.installOrderDeliveryStates().then(()=>{this.createNotificationSuccess({title:this.$tc("weareplanet-settings.settingForm.titleSuccess"),message:this.$tc("weareplanet-settings.settingForm.messageOrderDeliveryStateUpdated")}),this.isLoading=!1}).catch(()=>{this.createNotificationError({title:this.$tc("weareplanet-settings.settingForm.titleError"),message:this.$tc("weareplanet-settings.settingForm.messageOrderDeliveryStateError")}),this.isLoading=!1})},onSetPaymentMethodDefault(){this.isSettingDefaultPaymentMethods=!0,this.WeArePlanetConfigurationService.setWeArePlanetAsSalesChannelPaymentDefault(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.isSettingDefaultPaymentMethods=!1,this.isSetDefaultPaymentSuccessful=!0,this.createNotificationSuccess({title:this.$tc("weareplanet-settings.settingForm.titleSuccess"),message:this.$tc("weareplanet-settings.salesChannelCard.messageDefaultPaymentUpdated")})})},setErrorStates(){const e={code:1,detail:this.$tc("weareplanet-settings.messageNotBlank")};this.spaceIdFilled||(this.spaceIdErrorState=e),this.userIdFilled||(this.userIdErrorState=e),this.applicationKeyFilled||(this.applicationKeyErrorState=e)},onCheckApiConnection(e){const{spaceId:t,userId:a,applicationKey:n}=e;this.isTesting=!0,this.WeArePlanetConfigurationService.checkApiConnection(t,a,n).then(r=>{r.result===200?this.createNotificationSuccess({title:this.$tc("weareplanet-settings.settingForm.credentials.alert.title"),message:this.$tc("weareplanet-settings.settingForm.credentials.alert.successMessage")}):this.createNotificationError({title:this.$tc("weareplanet-settings.settingForm.credentials.alert.title"),message:this.$tc("weareplanet-settings.settingForm.credentials.alert.errorMessage")}),this.isTesting=!1}).catch(()=>{this.createNotificationError({title:this.$tc("weareplanet-settings.settingForm.credentials.alert.title"),message:this.$tc("weareplanet-settings.settingForm.credentials.alert.errorMessage")}),this.isTesting=!1})}}});const _e=`{% block weareplanet_settings_content_card_channel_config_credentials %} <mt-card class="mt-card" :title="$tc('weareplanet-settings.settingForm.credentials.cardTitle')" v-if="actualConfigData" > {% block weareplanet_settings_content_card_channel_config_credentials_card_container %} <sw-container> {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings %} <div v-if="actualConfigData" class="weareplanet-settings-credentials-fields"> {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_space_id %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_SPACE_ID]" :inheritedValue="selectedSalesChannelId === null ? null : allConfigs['null'][CONFIG_SPACE_ID]" :customInheritationCheckFunction="checkNumberFieldInheritance"> <template #content="props"> <mt-number-field :name="CONFIG_SPACE_ID" :required="true" :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.credentials.spaceId.label')" :helpText="$tc('weareplanet-settings.settingForm.credentials.spaceId.tooltipText')" :disabled="props.isInherited || !acl.can('weareplanet.editor')" :model-value="props.currentValue" :error="spaceIdErrorState" @update:model-value="props.updateCurrentValue"> </mt-number-field> </template> </sw-inherit-wrapper> {% endblock %} {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_user_id %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_USER_ID]" :inheritedValue="selectedSalesChannelId === null ? null : allConfigs['null'][CONFIG_USER_ID]" :customInheritationCheckFunction="checkNumberFieldInheritance"> <template #content="props"> <mt-number-field :name="CONFIG_USER_ID" :required="true" :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.credentials.userId.label')" :helpText="$tc('weareplanet-settings.settingForm.credentials.userId.tooltipText')" :disabled="props.isInherited || !acl.can('weareplanet.editor')" :model-value="props.currentValue" :error="userIdErrorState" @update:model-value="props.updateCurrentValue"> </mt-number-field> </template> </sw-inherit-wrapper> {% endblock %} {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_application_key %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_APPLICATION_KEY]" :inheritedValue="selectedSalesChannelId === null ? null : allConfigs['null'][CONFIG_APPLICATION_KEY]" :customInheritationCheckFunction="checkTextFieldInheritance"> <template #content="props"> <mt-password-field :name="CONFIG_APPLICATION_KEY" :required="true" :passwordToggleAble="true" :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.credentials.applicationKey.label')" :helpText="$tc('weareplanet-settings.settingForm.credentials.applicationKey.tooltipText')" :disabled="props.isInherited || !acl.can('weareplanet.editor')" :model-value="props.currentValue" :error="applicationKeyErrorState" @update:model-value="props.updateCurrentValue"> </mt-password-field> </template> </sw-inherit-wrapper> {% endblock %} </div> {% endblock %} {% verbatim %} <sw-container columns="1fr 1fr" gap="0px 30px"> <mt-button variant="primary" :isLoading="isTesting" @click="emitCheckApiConnectionEvent"> {{ $tc('weareplanet-settings.settingForm.credentials.button.label') }} </mt-button> </sw-container> {% endverbatim %} </sw-container> {% endblock %} </mt-card> {% endblock %}`,{Component:we,Mixin:Ie}=Shopware;we.register("sw-weareplanet-credentials",{template:_e,name:"WeArePlanetCredentials",inject:["acl"],mixins:[Ie.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},spaceIdFilled:{type:Boolean,required:!0},spaceIdErrorState:{required:!0},userIdFilled:{type:Boolean,required:!0},userIdErrorState:{required:!0},applicationKeyFilled:{type:Boolean,required:!0},applicationKeyErrorState:{required:!0},isLoading:{type:Boolean,required:!0},isTesting:{type:Boolean,required:!1}},data(){return{...u}},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkNumberFieldInheritance(e){return typeof e!="number"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"},emitCheckApiConnectionEvent(){const e={spaceId:this.actualConfigData[u.CONFIG_SPACE_ID],userId:this.actualConfigData[u.CONFIG_USER_ID],applicationKey:this.actualConfigData[u.CONFIG_APPLICATION_KEY]};this.$emit("check-api-connection-event",e)}}});const ye=`{% block weareplanet_settings_content_card_channel_config_options %} <mt-card class="mt-card" :title="$tc('weareplanet-settings.settingForm.options.cardTitle')"> {% block weareplanet_settings_content_card_channel_config_credentials_card_container %} <sw-container> {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings %} <div v-if="actualConfigData" class="weareplanet-settings-options-fields"> {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_space_view_id %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_SPACE_VIEW_ID]" :inheritedValue="selectedSalesChannelId === null ? null : allConfigs['null'][CONFIG_SPACE_VIEW_ID]" :customInheritationCheckFunction="checkNumberFieldInheritance"> <template #content="props"> <mt-number-field :name="CONFIG_SPACE_VIEW_ID" :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.options.spaceViewId.label')" :helpText="$tc('weareplanet-settings.settingForm.options.spaceViewId.tooltipText')" :disabled="props.isInherited" :model-value="props.currentValue" @update:model-value="props.updateCurrentValue"> </mt-number-field> </template> </sw-inherit-wrapper> {% endblock %} {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_integration %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_INTEGRATION]" :inheritedValue="selectedSalesChannelId === null ? null : allConfigs['null'][CONFIG_INTEGRATION]" :customInheritationCheckFunction="checkTextFieldInheritance"> <template #content="props"> <sw-single-select :name="CONFIG_INTEGRATION" labelProperty="name" valueProperty="id" :options="integrationOptions" :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.options.integration.label')" :helpText="$tc('weareplanet-settings.settingForm.options.integration.tooltipText')" :disabled="props.isInherited" :value="props.currentValue" @update:value="props.updateCurrentValue"> </sw-single-select> </template> </sw-inherit-wrapper> {% endblock %} {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_line_item_consistency_enabled %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null'][CONFIG_LINE_ITEM_CONSISTENCY_ENABLED]" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <mt-switch :name="CONFIG_LINE_ITEM_CONSISTENCY_ENABLED" bordered :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.options.lineItemConsistencyEnabled.label')" :helpText="$tc('weareplanet-settings.settingForm.options.lineItemConsistencyEnabled.tooltipText')" :disabled="props.isInherited" :checked="props.currentValue" @update:checked="props.updateCurrentValue"> </mt-switch> </template> </sw-inherit-wrapper> {% endblock %} {% block weareplanet_settings_content_card_channel_config_credentials_card_container_settings_email_enabled %} <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_EMAIL_ENABLED]" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null'][CONFIG_EMAIL_ENABLED]" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <mt-switch :name="CONFIG_EMAIL_ENABLED" bordered :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.options.emailEnabled.label')" :helpText="$tc('weareplanet-settings.settingForm.options.emailEnabled.tooltipText')" :disabled="props.isInherited" :checked="props.currentValue" @update:checked="props.updateCurrentValue"> </mt-switch> </template> </sw-inherit-wrapper> {% endblock %} </div> {% endblock %} </sw-container> {% endblock %} </mt-card> {% endblock %}`,{Component:Ce,Mixin:Ae}=Shopware;Ce.register("sw-weareplanet-options",{template:ye,name:"WeArePlanetOptions",mixins:[Ae.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...u}},computed:{integrationOptions(){return[{id:"payment_page",name:this.$tc("weareplanet-settings.settingForm.options.integration.options.payment_page")},{id:"iframe",name:this.$tc("weareplanet-settings.settingForm.options.integration.options.iframe")}]}},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkNumberFieldInheritance(e){return typeof e!="number"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"}}});const Ee='{% block weareplanet_settings_icon %} <span class="mt-icon icon--weareplanet-multicolor mt-icon--multicolor" style="width: 16px; height: 16px;"> <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="text/ecmascript" zoomAndPan="magnify" contentStyleType="text/css" id="Layer_1" style="enable-background:new 0 0 121.9 107.7;" version="1.1" width="1000px" xml:space="preserve" preserveAspectRatio="xMidYMid meet" viewBox="0 0 121.9 107.7" height="1000px" x="0px" y="0px"> <g> <path d="M81.2,15.4c-21.9,0-39.6,17.7-39.6,39.6v52.2h24.5V91.5c4.7,1.9,9.8,3,15.1,3c21.9,0,39.6-17.7,39.6-39.6 C120.8,33.1,103,15.4,81.2,15.4z M81.2,72.9c-9.9,0-18-8.1-18-18s8.1-18,18-18c9.9,0,18,8.1,18,18S91.1,72.9,81.2,72.9z"/> <ellipse rx="18" ry="18" cx="19.1" cy="18.6" transform="matrix(0.9871 -0.1602 0.1602 0.9871 -2.7307 3.301)"/> </g> </svg> </span> {% endblock %}',{Component:ve}=Shopware;ve.register("sw-weareplanet-settings-icon",{template:Ee});const Se=`<mt-card class="mt-card" :title="$tc('weareplanet-settings.settingForm.storefrontOptions.cardTitle')"> <sw-container> <div v-if="actualConfigData" class="weareplanet-settings-storefront-options-fields"> <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null'][CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED]" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <mt-switch :name="CONFIG_STOREFRONT_INVOICE_DOWNLOAD_ENABLED" bordered :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.storefrontOptions.invoiceDownloadEnabled.label')" :helpText="$tc('weareplanet-settings.settingForm.storefrontOptions.invoiceDownloadEnabled.tooltipText')" :disabled="props.isInherited" :checked="props.currentValue" @update:checked="props.updateCurrentValue"> </mt-switch> </template> </sw-inherit-wrapper> </div> </sw-container> </mt-card>`,{Component:Te,Mixin:Pe}=Shopware;Te.register("sw-weareplanet-storefront-options",{template:Se,name:"WeArePlanetStorefrontOptions",mixins:[Pe.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...u}},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkNumberFieldInheritance(e){return typeof e!="number"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"}}});const De=`<mt-card class="mt-card" :title="$tc('weareplanet-settings.settingForm.advancedOptions.cardTitle')"> <sw-container> <div v-if="actualConfigData" class="weareplanet-settings-advanced-options-fields"> <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null'][CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED]" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <mt-switch :name="CONFIG_STOREFRONT_WEBHOOKS_UPDATE_ENABLED" bordered :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.advancedOptions.webhooksUpdateEnabled.label')" :helpText="$tc('weareplanet-settings.settingForm.advancedOptions.webhooksUpdateEnabled.tooltipText')" :disabled="props.isInherited" :checked="props.currentValue" @update:checked="props.updateCurrentValue"> </mt-switch> </template> </sw-inherit-wrapper> <sw-inherit-wrapper v-model:value="actualConfigData[CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]" :inheritedValue="selectedSalesChannelId == null ? null : allConfigs['null'][CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED]" :customInheritationCheckFunction="checkBoolFieldInheritance"> <template #content="props"> <mt-switch :name="CONFIG_STOREFRONT_PAYMENTS_UPDATE_ENABLED" bordered :mapInheritance="props" :label="$tc('weareplanet-settings.settingForm.advancedOptions.paymentsUpdateEnabled.label')" :helpText="$tc('weareplanet-settings.settingForm.advancedOptions.paymentsUpdateEnabled.tooltipText')" :disabled="props.isInherited" :checked="props.currentValue" @update:checked="props.updateCurrentValue"> </mt-switch> </template> </sw-inherit-wrapper> </div> </sw-container> </mt-card>`,{Component:Ne,Mixin:ke}=Shopware;Ne.register("sw-weareplanet-advanced-options",{template:De,name:"WeArePlanetAdvancedOptions",inject:["acl"],mixins:[ke.getByName("notification")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},isLoading:{type:Boolean,required:!0}},data(){return{...u}},methods:{checkTextFieldInheritance(e){return typeof e!="string"?!0:e.length<=0},checkNumberFieldInheritance(e){return typeof e!="number"?!0:e.length<=0},checkBoolFieldInheritance(e){return typeof e!="boolean"}}});const $e={"sw-privileges":{permissions:{parents:{weareplanet:"WeArePlanet plugin"},weareplanet:{label:"WeArePlanet berechtigungen"}}},"weareplanet-settings":{general:{descriptionTextModule:"WeArePlanet-Einstellungen",mainMenuItemGeneral:"WeArePlanet"},header:"WeArePlanet",messageNotBlank:"Dieser Wert sollte nicht leer sein.",salesChannelCard:{button:{description:"Klicken Sie auf diese Schaltfläche, um WeArePlanet als Standard-Zahlungsabwickler im ausgewählten Vertriebskanal festzulegen",label:"WeArePlanet als Standard-Zahlungsabwickler festlegen"},messageDefaultPaymentError:"WeArePlanet als Standard-Zahlungsabwickler konnte nicht festgelegt werden..",messageDefaultPaymentUpdated:"WeArePlanet als Standard-Zahlungsabwickler wurde festgelegt."},settingForm:{credentials:{applicationKey:{label:"Application Key",tooltipText:"Der Anwendungsschlüssel wird verwendet, um dieses Plugin mit der API WeArePlanet zu authentifizieren."},cardTitle:"Anmeldedaten",spaceId:{label:"Space ID",tooltipText:"Die Space ID wird verwendet, um dieses Plugin mit der API WeArePlanet zu authentifizieren."},userId:{label:"User ID",tooltipText:"Die Benutzer-ID wird verwendet, um dieses Plugin mit der WeArePlanet-API zu authentifizieren."},button:{description:"Klicken Sie auf diese Schaltfläche, um die WeArePlanet API zu testen",label:"API Verbindung testen"},alert:{title:"API-Test",successMessage:"Die Verbindung wurde erfolgreich getestet.",errorMessage:"Die Verbindung ist fehlgeschlagen. Versuchen Sie es erneut."}},messageSaveSuccess:"WeArePlanet-Einstellungen wurden gespeichert.",messageOrderDeliveryStateError:"WeArePlanet OrderDeliveryState konnte nicht gespeichert werden.",messageOrderDeliveryStateUpdated:"WeArePlanet OrderDeliveryState wurde aktualisiert.",messagePaymentMethodConfigurationError:"WeArePlanet PaymentMethodConfiguration konnte nicht gespeichert werden. Bitte überprüfen Sie Ihre Anmeldedaten.",messagePaymentMethodConfigurationUpdated:"WeArePlanet PaymentMethodConfiguration wurde registriert.",messageWebHookError:"WeArePlanet WebHook konnte nicht gespeichert werden. Bitte überprüfen Sie Ihre Zugangsdaten.",messageWebHookUpdated:"WeArePlanet WebHook wurde aktualisiert.",options:{cardTitle:"Optionen",emailEnabled:{label:"Auftragsbestätigung per E-Mail senden",tooltipText:"Wenn diese Einstellung aktiviert ist, erhalten Ihre Kunden eine E-Mail von Ihrem Geschäft, wenn die Zahlung ihrer Bestellung autorisiert ist."},integration:{label:"Integration",options:{iframe:"Iframe",payment_page:"Payment Page"},tooltipText:"Integration"},lineItemConsistencyEnabled:{label:"Konsistenz der Einzelposten",tooltipText:"Wenn diese Option aktiviert ist, stimmen die Summen der Einzelposten in WeArePlanetPayment immer mit der Shopware-Bestellsumme überein."},spaceViewId:{label:"Space View ID",tooltipText:"Space View ID"}},save:"Speichern",storefrontOptions:{cardTitle:"Storefront-Optionen",invoiceDownloadEnabled:{label:"Rechnung Download",tooltipText:"Wenn diese Einstellung aktiviert ist, können Ihre Kunden Auftragsrechnungen von WeArePlanet herunterladen."}},advancedOptions:{cardTitle:"Erweiterte-Optionen",webhooksUpdateEnabled:{label:"Webhooks-Update",tooltipText:"Wenn diese Einstellung aktiviert ist, wird das Webhook-Update ausgelöst, wenn Sie die Einstellungen speichern"},paymentsUpdateEnabled:{label:"Payments-Update",tooltipText:"Wenn diese Einstellung aktiviert ist, wird die Aktualisierung der Zahlungsmethoden ausgelöst, wenn Sie die Einstellungen speichern"}},titleError:"Fehler",titleSuccess:"Erfolg"}}},Oe={"sw-privileges":{permissions:{parents:{weareplanet:"WeArePlanet plugin"},weareplanet:{label:"WeArePlanet permissions"}}},"weareplanet-settings":{general:{descriptionTextModule:"WeArePlanet settings",mainMenuItemGeneral:"WeArePlanet"},header:"WeArePlanet",messageNotBlank:"This value should not be blank.",salesChannelCard:{button:{description:"Click this button to set WeArePlanet as default payment handler in the selected SalesChannel",label:"Set WeArePlanet as default payment handler"},messageDefaultPaymentError:"WeArePlanet as default payment could not be set.",messageDefaultPaymentUpdated:"WeArePlanet as default payment has been set."},settingForm:{credentials:{applicationKey:{label:"Application Key",tooltipText:"The Application Key is used to authenticate this plugin with the WeArePlanet API."},cardTitle:"Credentials",spaceId:{label:"Space ID",tooltipText:"The space ID is used to authenticate this plugin with the WeArePlanet API."},userId:{label:"User ID",tooltipText:"The user ID is used to authenticate this plugin with the WeArePlanet API."},button:{description:"Click this button to test the WeArePlanet API",label:"API connection test"},alert:{title:"API Test",successMessage:"The connection was successfully tested.",errorMessage:"The connection was failed. Try it again."}},messageSaveSuccess:"WeArePlanet settings have been saved.",messageOrderDeliveryStateError:"WeArePlanet OrderDeliveryState could not be saved.",messageOrderDeliveryStateUpdated:"WeArePlanet OrderDeliveryState has been updated.",messagePaymentMethodConfigurationError:"WeArePlanet PaymentMethodConfiguration could not be saved. Please check your credentials.",messagePaymentMethodConfigurationUpdated:"WeArePlanet PaymentMethodConfiguration has been registered.",messageWebHookError:"WeArePlanet WebHook could not be saved. Please check your credentials.",messageWebHookUpdated:"WeArePlanet WebHook has been updated.",options:{cardTitle:"Options",emailEnabled:{label:"Send order confirmation email",tooltipText:"If this setting is enabled your customers will receive an email from your store when their order payment is authorised"},integration:{label:"Integration",options:{iframe:"Iframe",payment_page:"Payment Page"},tooltipText:"Integration"},lineItemConsistencyEnabled:{label:"Line item consistency",tooltipText:"If this option is enabled line item totals in WeArePlanetPayment will always match Shopware order total"},spaceViewId:{label:"Space View ID",tooltipText:"Space View ID"}},save:"Save",storefrontOptions:{cardTitle:"Storefront Options",invoiceDownloadEnabled:{label:"Invoice Download",tooltipText:"If this setting is enabled your customers will be able to download order invoices from WeArePlanet"}},advancedOptions:{cardTitle:"Advanced Options",webhooksUpdateEnabled:{label:"Webhooks Update",tooltipText:"If this setting is enabled webhook update will be triggered when you save settings"},paymentsUpdateEnabled:{label:"Payments Update",tooltipText:"If this setting is enabled payment methods update will be triggered when you save settings"}},titleError:"Error",titleSuccess:"Success"}}},xe={"sw-privileges":{permissions:{parents:{weareplanet:"WeArePlanet brancher"},weareplanet:{label:"WeArePlanet autorisations"}}},"weareplanet-settings":{general:{descriptionTextModule:"Paramètres de WeArePlanet",mainMenuItemGeneral:"WeArePlanet"},header:"WeArePlanet",messageNotBlank:"Cette valeur ne doit pas être vide.",salesChannelCard:{button:{description:"Cliquez sur ce bouton pour définir WeArePlanet comme gestionnaire de paiement par défaut dans le canal de vente sélectionné.",label:"Définir WeArePlanet comme gestionnaire de paiement par défaut"},messageDefaultPaymentError:"WeArePlanet comme paiement par défaut n'a pas pu être défini.",messageDefaultPaymentUpdated:"WeArePlanet comme paiement par défaut a été défini."},settingForm:{credentials:{applicationKey:{label:"Application Key",tooltipText:"La clé d'application est utilisée pour authentifier ce plugin avec l'API."},cardTitle:"Références",spaceId:{label:"Space ID",tooltipText:"L'ID de l'espace est utilisé pour authentifier ce plugin avec l'API WeArePlanet.."},userId:{label:"User ID",tooltipText:"L'ID utilisateur est utilisé pour authentifier ce plugin avec l'API WeArePlanet."},button:{description:"Cliquez sur ce bouton pour tester l'API WeArePlanet.",label:"Test de connexion à l'API"},alert:{title:"Test API",successMessage:"La connexion a été testée avec succès.",errorMessage:"La connexion a échoué. Réessayez."}},messageSaveSuccess:"Les paramètres de WeArePlanet ont été enregistrés.",messageOrderDeliveryStateError:"Les paramètres de WeArePlanet OrderDeliveryState n'ont pas pu être enregistrés.",messageOrderDeliveryStateUpdated:"WeArePlanet OrderDeliveryState a été mis à jour.",messagePaymentMethodConfigurationError:"WeArePlanet PaymentMethodConfiguration n'a pas pu être enregistré. Veuillez vérifier vos informations d'identification.",messagePaymentMethodConfigurationUpdated:"WeArePlanet PaymentMethodConfiguration a été enregistré.",messageWebHookError:"WeArePlanet WebHook n'a pas pu être enregistré. Veuillez vérifier vos informations d'identification.",messageWebHookUpdated:"WeArePlanet WebHook a été mis à jour.",options:{cardTitle:"Options",emailEnabled:{label:"Envoyer un e-mail de confirmation de commande",tooltipText:"If this setting is enabled your customers will receive an email from your store when their order payment is authorised"},integration:{label:"Integration",options:{iframe:"Iframe",payment_page:"Page de paiement"},tooltipText:"Integration"},lineItemConsistencyEnabled:{label:"Cohérence des postes de ligne",tooltipText:"Si cette option est activée, les totaux des articles dans WeArePlanetPayment correspondront toujours au total de la commande Shopware."},spaceViewId:{label:"Space View ID",tooltipText:"Space View ID"}},save:"Enregistrer",storefrontOptions:{cardTitle:"Storefront Options",invoiceDownloadEnabled:{label:"Téléchargement de facture",tooltipText:"Si ce paramètre est activé, vos clients pourront télécharger les factures de commande depuis WeArePlanet"}},advancedOptions:{cardTitle:"Options avancées",webhooksUpdateEnabled:{label:"Mise à jour des webhooks",tooltipText:"Si ce paramètre est activé, la mise à jour des webhooks sera déclenchée lorsque vous enregistrerez les paramètres."},paymentsUpdateEnabled:{label:"Mise à jour des paiements",tooltipText:"Si ce paramètre est activé, la mise à jour des méthodes de paiement sera déclenchée lorsque vous enregistrez les paramètres."}},titleError:"Erreur",titleSuccess:"Succès"}}},Fe={"sw-privileges":{permissions:{parents:{weareplanet:"WeArePlanet brancher"},weareplanet:{label:"WeArePlanet autorisations"}}},"weareplanet-settings":{general:{descriptionTextModule:"Impostazioni WeArePlanet",mainMenuItemGeneral:"WeArePlanet"},header:"WeArePlanet",messageNotBlank:"Questo valore non dovrebbe essere vuoto.",salesChannelCard:{button:{description:"Fai clic su questo pulsante per impostare WeArePlanet come gestore di pagamento predefinito nel SalesChannel selezionato",label:"Imposta WeArePlanet come gestore di pagamento predefinito"},messageDefaultPaymentError:"Non è stato possibile impostare WeArePlanet come pagamento predefinito.",messageDefaultPaymentUpdated:"WeArePlanet come pagamento predefinito è stato impostato."},settingForm:{credentials:{applicationKey:{label:"Chiave di applicazione",tooltipText:"La chiave dell'applicazione è usata per autenticare questo plugin con l'API WeArePlanet."},cardTitle:"Credenziali",spaceId:{label:"ID spazio",tooltipText:"L'ID dello spazio è usato per autenticare questo plugin con l'API WeArePlanet."},userId:{label:"ID utente",tooltipText:"L'ID utente è usato per autenticare questo plugin con l'API WeArePlanet."},button:{description:"Fare clic su questo pulsante per testare l'API WeArePlanet.",label:"Test di connessione API"},alert:{title:"Test API",successMessage:"La connessione è stata testata con successo.",errorMessage:"La connessione è fallita. Riprovare."}},messageSaveSuccess:"Le impostazioni di WeArePlanet sono state salvate.",messageOrderDeliveryStateError:"WeArePlanet OrderDeliveryState non può essere salvato.",messageOrderDeliveryStateUpdated:"WeArePlanet OrderDeliveryState è stato aggiornato.",messagePaymentMethodConfigurationError:"WeArePlanet PaymentMethodConfiguration non può essere salvato. Per favore controlla le tue credenziali.",messagePaymentMethodConfigurationUpdated:"WeArePlanet PaymentMethodConfiguration è stato registrato.",messageWebHookError:"WeArePlanet WebHook non può essere salvato. Per favore controlla le tue credenziali.",messageWebHookUpdated:"WeArePlanet WebHook è stato aggiornato.",options:{cardTitle:"Opzioni",emailEnabled:{label:"Invia email di conferma dell'ordine",tooltipText:"Se questa impostazione è abilitata i tuoi clienti riceveranno un'email dal tuo negozio quando il pagamento del loro ordine sarà autorizzato"},integration:{label:"Integrazione",options:{iframe:"Iframe",payment_page:"Pagina di pagamento"},tooltipText:"Integrazione"},lineItemConsistencyEnabled:{label:"Coerenza dell'elemento linea",tooltipText:"Se questa opzione è abilitata i totali degli articoli in WeArePlanetPayment corrisponderanno sempre al totale dell'ordine Shopware"},spaceViewId:{label:"ID della vista spazio",tooltipText:"ID della vista spaziale"}},save:"Salva",storefrontOptions:{cardTitle:"Opzioni vetrina",invoiceDownloadEnabled:{label:"Scaricamento fattura",tooltipText:"Se questa impostazione è abilitata i tuoi clienti potranno scaricare le fatture degli ordini da WeArePlanet"}},advancedOptions:{cardTitle:"Opzioni avanzate",webhooksUpdateEnabled:{label:"Aggiornamento webhooks",tooltipText:"Se questa impostazione è abilitata l'aggiornamento dei webhook sarà attivato quando si salvano le impostazioni"},paymentsUpdateEnabled:{label:"Aggiornamento pagamenti",tooltipText:"Se questa impostazione è abilitata l'aggiornamento dei metodi di pagamento verrà attivato quando si salvano le impostazioni"}},titleError:"Errore",titleSuccess:"Successo"}}},{Module:Le}=Shopware;Le.register("weareplanet-settings",{type:"plugin",name:"WeArePlanet",title:"weareplanet-settings.general.descriptionTextModule",description:"weareplanet-settings.general.descriptionTextModule",color:"#28d8ff",icon:"default-action-settings",version:"1.0.1",targetVersion:"1.0.1",snippets:{"de-DE":$e,"en-GB":Oe,"fr-FR":xe,"it-IT":Fe},routes:{index:{component:"weareplanet-settings",path:"index",meta:{parentPath:"sw.settings.index",privilege:"weareplanet.viewer"},props:{default:e=>({hash:e.params.hash})}}},settingsItem:{group:"plugins",to:"weareplanet.settings.index",iconComponent:"sw-weareplanet-settings-icon",backgroundEnabled:!0,privilege:"weareplanet.viewer"}});const m=Shopware.Classes.ApiService;class We extends m{constructor(t,a,n="weareplanet"){super(t,a,n)}registerWebHooks(t=null){const a=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/register-web-hooks`;return this.httpClient.post(n,{salesChannelId:t},{headers:a}).then(r=>m.handleResponse(r))}checkApiConnection(t=null,a=null,n=null){const r=this.getBasicHeaders(),s=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/check-api-connection`;return this.httpClient.post(s,{spaceId:t,userId:a,applicationId:n},{headers:r}).then(o=>m.handleResponse(o))}setWeArePlanetAsSalesChannelPaymentDefault(t=null){const a=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/set-weareplanet-as-sales-channel-payment-default`;return this.httpClient.post(n,{salesChannelId:t},{headers:a}).then(r=>m.handleResponse(r))}synchronizePaymentMethodConfiguration(t=null){const a=this.getBasicHeaders(),n=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/synchronize-payment-method-configuration`;return this.httpClient.post(n,{salesChannelId:t},{headers:a}).then(r=>m.handleResponse(r))}installOrderDeliveryStates(){const t=this.getBasicHeaders(),a=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/configuration/install-order-delivery-states`;return this.httpClient.post(a,{},{headers:t}).then(n=>m.handleResponse(n))}}const h=Shopware.Classes.ApiService;class Me extends h{constructor(t,a,n="weareplanet"){super(t,a,n)}createRefund(t,a,n,r){const s=this.getBasicHeaders(),o=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/refund/create-refund/`;return this.httpClient.post(o,{salesChannelId:t,transactionId:a,quantity:n,lineItemId:r},{headers:s}).then(i=>h.handleResponse(i))}createRefundByAmount(t,a,n){const r=this.getBasicHeaders(),s=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/refund/create-refund-by-amount/`;return this.httpClient.post(s,{salesChannelId:t,transactionId:a,refundableAmount:n},{headers:r}).then(o=>h.handleResponse(o))}createPartialRefund(t,a,n,r){const s=this.getBasicHeaders(),o=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/refund/create-partial-refund/`;return this.httpClient.post(o,{salesChannelId:t,transactionId:a,refundableAmount:n,lineItemId:r},{headers:s}).then(i=>h.handleResponse(i))}}const A=Shopware.Classes.ApiService;class Re extends A{constructor(t,a,n="weareplanet"){super(t,a,n)}getTransactionData(t,a){const n=this.getBasicHeaders(),r=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-transaction-data/`;return this.httpClient.post(r,{salesChannelId:t,transactionId:a},{headers:n}).then(s=>A.handleResponse(s))}getInvoiceDocument(t,a){return`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-invoice-document/${t}/${a}`}getPackingSlip(t,a){return`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction/get-packing-slip/${t}/${a}`}}const E=Shopware.Classes.ApiService;class Be extends E{constructor(t,a,n="weareplanet"){super(t,a,n)}createTransactionCompletion(t,a){const n=this.getBasicHeaders(),r=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction-completion/create-transaction-completion/`;return this.httpClient.post(r,{salesChannelId:t,transactionId:a},{headers:n}).then(s=>E.handleResponse(s))}}const v=Shopware.Classes.ApiService;class Ge extends v{constructor(t,a,n="weareplanet"){super(t,a,n)}createTransactionVoid(t,a){const n=this.getBasicHeaders(),r=`${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/transaction-void/create-transaction-void/`;return this.httpClient.post(r,{salesChannelId:t,transactionId:a},{headers:n}).then(s=>v.handleResponse(s))}}const{Application:d}=Shopware;d.addServiceProvider("WeArePlanetConfigurationService",e=>{const t=d.getContainer("init");return new We(t.httpClient,e.loginService)});d.addServiceProvider("WeArePlanetRefundService",e=>{const t=d.getContainer("init");return new Me(t.httpClient,e.loginService)});d.addServiceProvider("WeArePlanetTransactionService",e=>{const t=d.getContainer("init");return new Re(t.httpClient,e.loginService)});d.addServiceProvider("WeArePlanetTransactionCompletionService",e=>{const t=d.getContainer("init");return new Be(t.httpClient,e.loginService)});d.addServiceProvider("WeArePlanetTransactionVoidService",e=>{const t=d.getContainer("init");return new Ge(t.httpClient,e.loginService)});
//# sourceMappingURL=we-are-planet-payment-DXNzm_q0.js.map
